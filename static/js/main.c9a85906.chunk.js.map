{"version":3,"sources":["Components/Square.jsx","App.js","index.js"],"names":["Square","props","classes","className","onClick","state","App","initialState","useState","gameState","setGameState","isXTurn","setIsXTurn","onSquareClick","index","strings","Array","from","useEffect","winner","checkWinner","alert","lines","i","length","a","b","c","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAceA,EAZA,SAACC,GAMd,IAAMC,EAAUD,EAAME,UAAN,UAAqBF,EAAME,UAA3B,oBAChB,OAAO,0BAAMA,UAAWD,EAASE,QAASH,EAAMG,SAC3CH,EAAMI,QC2HEC,EAlIH,WAEJ,IAAAC,EAAe,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAhD,EAEuBC,mBAASD,GAFhC,mBAEJE,EAFI,KAEOC,EAFP,OAImBF,oBAAS,GAJ5B,mBAIJG,EAJI,KAIKC,EAJL,KAOAC,EAAgB,SAACC,GAErB,IAAIC,EAAUC,MAAMC,KAAKR,GAEzBM,EAAQD,GAASH,EAAU,IAAM,IAEjCD,EAAaK,GAEbH,GAAYD,IAIdO,qBAAU,WAER,IAAMC,EAASC,IASf,OAPID,IAEFE,MAAM,GAAD,OAAIF,EAAJ,cAELT,EAAaH,IAGR,eAGT,CAACE,IAGD,IAAMW,EAAc,WAalB,IAXA,IAAME,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,mBAEnBD,EAAMC,GAFa,GAE9BE,EAF8B,KAE3BC,EAF2B,KAExBC,EAFwB,KAIrC,GACElB,EAAUgB,IACVhB,EAAUgB,KAAOhB,EAAUiB,IAC3BjB,EAAUgB,KAAOhB,EAAUkB,GAG3B,OAAOlB,EAAUgB,GAIrB,OAAO,MAGT,OACE,yBAAKtB,UAAU,cACb,uBAAGA,UAAU,gBAAb,qBACA,yBAAKA,UAAU,OAEb,kBAAC,EAAD,CACEA,UAAU,iBACVE,MAAOI,EAAU,GACjBL,QAAS,kBAAMS,EAAc,MAE/B,kBAAC,EAAD,CACEV,UAAU,iBACVE,MAAOI,EAAU,GACjBL,QAAS,kBAAMS,EAAc,MAE/B,kBAAC,EAAD,CACEV,UAAU,WACVE,MAAOI,EAAU,GACjBL,QAAS,kBAAMS,EAAc,OAGjC,yBAAKV,UAAU,OACb,kBAAC,EAAD,CACEA,UAAU,iBACVE,MAAOI,EAAU,GACjBL,QAAS,kBAAMS,EAAc,MAE/B,kBAAC,EAAD,CACEV,UAAU,iBACVE,MAAOI,EAAU,GACjBL,QAAS,kBAAMS,EAAc,MAE/B,kBAAC,EAAD,CACEV,UAAU,WACVE,MAAOI,EAAU,GACjBL,QAAS,kBAAMS,EAAc,OAGjC,yBAAKV,UAAU,OACb,kBAAC,EAAD,CACEA,UAAU,UACVE,MAAOI,EAAU,GACjBL,QAAS,kBAAMS,EAAc,MAE/B,kBAAC,EAAD,CACEV,UAAU,UACVE,MAAOI,EAAU,GACjBL,QAAS,kBAAMS,EAAc,MAE/B,kBAAC,EAAD,CAAQR,MAAOI,EAAU,GAAIL,QAAS,kBAAMS,EAAc,OAE5D,4BACEV,UAAU,eACVC,QAAS,WACPM,EAAaH,KAHjB,gBCrHNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.c9a85906.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = (props) => {\n  /* \n  1) Set the classes associated with the Square based on whether or not props.className is true and its value; if there were no className given to the Square then only assign the class 'square' to it \n  2) onClick of the Square run the function assigned to the Square\n  3) state is assigned based on the current gameState of the Square as related to its index\n  */\n  const classes = props.className ? `${props.className} square` : `square`;\n  return <span className={classes} onClick={props.onClick}>\n      {props.state}\n  </span>;\n};\n\nexport default Square;\n","import React, { useState, useEffect } from 'react';\nimport Square from './Components/Square';\n\nconst App = () => {\n  // Represents game board\n  const initialState = ['', '', '', '', '', '', '', '', ''],\n  // Represents current state of game\n   [gameState, setGameState] = useState(initialState),\n   // Represents player turn\n   [isXTurn, setIsXTurn] = useState(false);\n\n   // On every square click check the status of the Square based on its index ie. gameState(index)\n  const onSquareClick = (index) => {\n    // Create array using current gameState\n    let strings = Array.from(gameState);\n    // In the index of the square that has been clicked determine if it is and X or O (First player will be 'O')\n    strings[index] = isXTurn ? 'X' : 'O';\n    // Update gameState based on which square was clicked\n    setGameState(strings);\n    // Update player turn with toggle\n    setIsXTurn(!isXTurn);\n  };\n\n  // Upon loading page and every time the gameState changes\n  useEffect(() => {\n    // Assign 'winner' variable to checkWinner function that checks if the player has won\n    const winner = checkWinner();\n    // If player has won then \n    if (winner) {\n      // Alert player as winner\n      alert(`${winner} has won!`);\n      // Reset game back to clear board\n      setGameState(initialState);\n    }\n    // Return a cleanup function\n    return () => {};\n  }, \n  // Watch/Update page whenever the gameState changes\n  [gameState]);\n\n  // Check for a winner\n  const checkWinner = () => {\n    // Create an array of arrays that shows all possible combinations that can lead to victory\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    // Loop through the combinations \n    for (let i = 0; i < lines.length; i++) {\n      // Each combination will be assigned a line during the loop\n      const [a, b, c] = lines[i];\n      // If the gameState for the 3 square combination equals one of the winning combinations then\n      if (\n        gameState[a] &&\n        gameState[a] === gameState[b] &&\n        gameState[a] === gameState[c]\n      ) {\n        // Return that (lines) combination as true and winner\n        return gameState[a];\n      }\n    }\n    // Otherwise return nothing\n    return null;\n  };\n\n  return (\n    <div className='app-header'>\n      <p className='heading-text'>React Tic Tac Toe</p>\n      <div className='row'>\n        {/* Each of the 9 Square components are separate and holds its own gameState. When the Square has been clicked then we check the onSquareClick function to manupulate its gameState */}\n        <Square\n          className='b-bottom-right'\n          state={gameState[0]}\n          onClick={() => onSquareClick(0)}\n        />\n        <Square\n          className='b-bottom-right'\n          state={gameState[1]}\n          onClick={() => onSquareClick(1)}\n        />\n        <Square\n          className='b-bottom'\n          state={gameState[2]}\n          onClick={() => onSquareClick(2)}\n        />\n      </div>\n      <div className='row'>\n        <Square\n          className='b-bottom-right'\n          state={gameState[3]}\n          onClick={() => onSquareClick(3)}\n        />\n        <Square\n          className='b-bottom-right'\n          state={gameState[4]}\n          onClick={() => onSquareClick(4)}\n        />\n        <Square\n          className='b-bottom'\n          state={gameState[5]}\n          onClick={() => onSquareClick(5)}\n        />\n      </div>\n      <div className='row'>\n        <Square\n          className='b-right'\n          state={gameState[6]}\n          onClick={() => onSquareClick(6)}\n        />\n        <Square\n          className='b-right'\n          state={gameState[7]}\n          onClick={() => onSquareClick(7)}\n        />\n        <Square state={gameState[8]} onClick={() => onSquareClick(8)} />\n      </div>\n      <button\n        className='clear-button'\n        onClick={() => {\n          setGameState(initialState);\n        }}>\n        Clear Game\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}